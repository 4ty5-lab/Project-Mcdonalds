chrome.commands.onCommand.addListener((command) => {
  switch(command) {
    case "bookmark-tab":
      chrome.tabs.query({active: true, currentWindow: true}, (tabs) => {
        chrome.storage.local.get('favorites', (data) => {
          const favorites = data.favorites || {};
          favorites[tabs[0].url] = {
            title: tabs[0].title,
            added: new Date().toISOString()
          };
          chrome.storage.local.set({favorites});
        });
      });
      break;
      
    case "unbookmark-tab":
      chrome.tabs.query({active: true, currentWindow: true}, (tabs) => {
        chrome.storage.local.get('favorites', (data) => {
          const favorites = data.favorites || {};
          if (favorites[tabs[0].url]) {
            delete favorites[tabs[0].url];
            chrome.storage.local.set({favorites});
          }
        });
      });
      break;
      
    case "open-favorite":
      const query = prompt("Enter favorite tab keywords:");
      if (query) {
        chrome.storage.local.get('favorites', (data) => {
          const favorites = data.favorites || {};
          const results = Object.values(favorites).filter(fav => 
            fav.title.toLowerCase().includes(query.toLowerCase()) ||
            fav.url.toLowerCase().includes(query.toLowerCase())
          );
          if (results.length > 0) {
            chrome.tabs.create({url: results[0].url});
          }
        });
      }
      break;
      
    case "open-menu":
      chrome.windows.create({
        url: "menu.html",
        type: "popup",
        width: 400,
        height: 300
      });
      break;
  }
});

setInterval(() => {
  chrome.tabs.query({}, (tabs) => {
    const now = new Date().getTime();
    tabs.forEach(tab => {
      if (tab.lastAccessed && (now - tab.lastAccessed) > 15 * 60 * 1000) {
        chrome.tabs.discard(tab.id);
      }
    });
  });
}, 60000);
